import os
import numpy as np
import mysql.connector
from dotenv import load_dotenv
from docx import Document

load_dotenv()

# calculate euclidean distance
def euclidean_distance(point1, point2):
    return np.linalg.norm(point1 - point2)


# Function to calculate Eye length ratio: length of eye (maximum of two) over distance between points 8 and 13.
def calculate_eye_length_ratio(max_eye_distance, distance_8_13):
    return max_eye_distance / distance_8_13

# Function to calculate Eye distance ratio: distance between center of two eyes over distance between points 8 and 13. 
def calculate_eye_distance_ratio(eye_center, distance_8_13):
    return eye_center / distance_8_13

# Function to calculate Nose ratio: Distance between points 15 and 16 over distance between 20 and 21. 
def calculate_nose_ratio(distance_15_16, distance_20_21):
    return distance_15_16 / distance_20_21

# Function to calculate Lip size ratio: Distance between points 2 and 3 over distance between 17 and 18. 
def calculate_lip_size_ratio(distance_2_3,distance_17_18):
    return distance_2_3 / distance_17_18

# Function to calculate Lip length ratio: Distance between points 2 and 3 over distance between 20 and 21. 
def calculate_lip_length_ratio(distance_2_3,distance_20_21):
    return distance_2_3 / distance_20_21

# Function to calculate Eye-brow length ratio: Distance between points 4 and 5 (or distance between points 6 and 7 whichever is larger) over distance between 8 and 13. 
def calculate_eyebrow_length_ratio(max_eyebrow_length,distance_8_13):
    return max_eyebrow_length / distance_8_13

# Function to calculate Aggressive ratio: Distance between points 10 and 19 over distance between 20 and 21. 
def calculate_aggressive_ratio(distance_10_19,distance_20_21):
    return distance_10_19 / distance_20_21


def calculate_distances_from_db():
    # get database setting
    host = os.getenv('MYSQL_HOST')
    port = os.getenv('MYSQL_PORT')
    user = os.getenv('MYSQL_USER')
    password = os.getenv('MYSQL_PASSWORD')
    database = os.getenv('MYSQL_DB')

    # connect database
    conn = mysql.connector.connect(host=host, port=port, user=user, password=password, database=database)
    cursor = conn.cursor()

    # sql query
    query = ("SELECT p_id, image_id, point_id, x_coordinate, y_coordinate "
             "FROM facial_landmarks "
             "WHERE point_id IN (9, 10, 11, 12, 0, 1, 8, 13, 15, 16, 20, 21, 2, 3, 17, 18, 4, 5, 6, 7, 19)"  # Include necessary points for calculations
            )
    cursor.execute(query)

    # Get the coordinate data of facial feature points from the database and organize them into a dictionary `distances`
    distances = {}
    for (p_id, image_id, point_id, x_coordinate, y_coordinate) in cursor:
        key = (p_id, image_id)
        if key not in distances:
            distances[key] = {}
        
        if point_id == 8 or point_id == 13:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])
        elif point_id == 9 or point_id == 10:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])
        elif point_id == 11 or point_id == 12:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])  
        elif point_id == 0 or point_id == 1:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate]) 
        elif point_id == 15 or point_id == 16:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])    
        elif point_id == 20 or point_id == 21:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])    
        elif point_id == 2 or point_id == 3:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])
        elif point_id == 17 or point_id == 18:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])  
        elif point_id == 4 or point_id == 5:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate]) 
        elif point_id == 6 or point_id == 7:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])    
        elif point_id == 10 or point_id == 19:
            distances[key][f'point{point_id}'] = np.array([x_coordinate, y_coordinate])    

    cursor.close()
    conn.close()

    result = {}
    for key, value in distances.items():
        try:
            if 'point8' in value and 'point13' in value and 'point9' in value and 'point10' in value \
               and 'point11' in value and 'point12' in value:

                # Calculate distances
                distance_eye1 = euclidean_distance(value['point9'], value['point10'])
                distance_eye2 = euclidean_distance(value['point11'], value['point12'])
                max_eye_distance = max(distance_eye1, distance_eye2)
                distance_8_13 = euclidean_distance(value['point8'], value['point13'])
                eye_center = euclidean_distance(value['point0'], value['point1'])
                distance_15_16 = euclidean_distance(value['point15'], value['point16'])
                distance_20_21 = euclidean_distance(value['point20'], value['point21'])
                distance_2_3 = euclidean_distance(value['point2'], value['point3'])
                distance_17_18 = euclidean_distance(value['point17'], value['point18'])
                distance_eyebrow1 = euclidean_distance(value['point4'], value['point5'])
                distance_eyebrow2 = euclidean_distance(value['point6'], value['point7'])
                max_eyebrow_length = max(distance_eyebrow1, distance_eyebrow2)
                distance_10_19 = euclidean_distance(value['point10'], value['point19'])
                distance_20_21 = euclidean_distance(value['point20'], value['point21'])
                
                # Calculate ratios
                eye_length_ratio = calculate_eye_length_ratio(max_eye_distance, distance_8_13)
                eye_distance_ratio= calculate_eye_distance_ratio(eye_center, distance_8_13)
                nose_ratio = calculate_nose_ratio(distance_15_16, distance_20_21)
                lip_size_ratio = calculate_lip_size_ratio(distance_2_3,distance_17_18)
                lip_length_ratio = calculate_lip_length_ratio(distance_2_3,distance_20_21)
                eyebrow_length_ratio = calculate_eyebrow_length_ratio(max_eyebrow_length,distance_8_13)
                aggressive_ratio = calculate_aggressive_ratio(distance_10_19,distance_20_21)

                result[key] = {
                    'Eye length ratio': eye_length_ratio,
                    'eye_distance_ratio': eye_distance_ratio,
                    'nose_ratio': nose_ratio,
                    'lip_size_ratio': lip_size_ratio,
                    'lip_length_ratio': lip_length_ratio,
                    'eyebrow_length_ratio': eyebrow_length_ratio,
                    'aggressive_ratio':aggressive_ratio
                }
            else:
                print(f"Missing necessary points {point_id} for key {key}")

        except KeyError as e:
            print(f"KeyError: Missing key {e} in value {value}")

    # check data accuracy
    save_distances_to_file(distances, 'distances.txt')  

    return result

# print distances data to a file
def save_distances_to_file(distances, filename):
    with open(filename, 'w') as file:
        for key, value in distances.items():
            file.write(f"p_id, image_id: {key}\n")
            for point_id, coordinates in value.items():
                file.write(f"{point_id}: {coordinates.tolist()}\n")
            file.write("\n")

if __name__ == "__main__":
    distances = calculate_distances_from_db()
    print("Ratios:", distances)
